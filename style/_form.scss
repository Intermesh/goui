@use "config";
@use "util";
@use "icons";
@use 'sass:math';
@use "normalize";
@use "shadows";
@use "button";

$formFieldBorderRadius: util.dp(10);

@keyframes onautofillstart {
	from {/**/}
	to {/**/}
}

@keyframes onautofillcancel {
	from {/**/}
	to {/**/}
}

.checkbox-group {
	//reset fieldset defaults
	border: 0;
	margin-inline-start: 0;
	margin-inline-end: 0;
	padding-block-start: 0;
	padding-inline-start: 0;
	padding-inline-end: 0;
	padding-block-end: 0;

	h3.legend {
		//color: $colorTextSecondary;
		//font: $fontBase;
		//margin: dp(24) 0 dp(8) 0;

		&:empty {
			display: none;
		}
	}

	@extend %boxgroup;

}

.goui.group {
	display:flex;
	//align-items: start;
	align-items: stretch;

	.goui-form-field, .goui-display-field {
		margin: 0;
		width: auto;

		.control {
			//padding-top: 0; //for radio and checkbox group
			//padding-bottom: 0; //for radio and checkbox group
			flex-wrap: nowrap;

			span.box-label {
				//put here and not below for extra strong rules
				padding: util.dp(9) util.dp(18);
				font-weight:normal;
				margin:0 ;
				border: config.$borderWidth solid config.$colorOutline;
			}
		}

		&:not(:first-child) {
			.wrap {
				border-top-left-radius: 0;
				border-bottom-left-radius: 0;

				span.box-label {
					border-top-left-radius: 0;
					border-bottom-left-radius: 0;
				}
			}
		}
		&:not(:last-child) {
			.wrap {
				border-right-width: 0;
				border-top-right-radius: 0;
				border-bottom-right-radius: 0;

				span.box-label {
					border-top-right-radius: 0;
					border-bottom-right-radius: 0;
				}
			}
		}
	}

	>.goui-display-field {
		.wrap {
			@extend %control-pit;

			.label {
				background-color: var(--bg-input);
			}
		}
	}

	&>.goui-form-field:focus-within:not(:last-child) {
		.wrap {
			border-right-width: config.$borderWidth;
		}
	}

	&>.goui-form-field:focus-within + * {
		&.goui-button {
			border-left: 0;
		}
		.wrap {
			border-left: 0;
			div.label {
				transform: translateX(0 - config.$borderWidth);
			}
		}
	}


}


%control-pit {
	overflow:hidden;
	transition: border-color 100ms linear;
	border-radius: $formFieldBorderRadius;
	background-color: config.$colorBackgroundInput;
	border: config.$borderWidth solid config.$colorOutline;
	//outline: config.$borderWidth solid config.$colorOutline;
	&:empty {
		border: 0;
	}
}
// base for checkbox and radio's
%boxgroup {
	input {
		-webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
		cursor: pointer;
	}

	&.box input {
		margin: 0;
		color: config.$colorMain;
		min-width: config.$baseLineHeight;
		min-height: config.$baseLineHeight;
		width: config.$baseLineHeight;
		height: config.$baseLineHeight;
		background-color: config.$colorBackgroundInput;
		border: config.$borderWidth solid config.$colorOutline;
		border-radius: math.div(config.$borderRadius, 2);
		&:before { // tick
			content: '';
			transform: scale(0);
			display:inline-block;
			margin: 0-(config.$borderWidth);
			width: config.$baseLineHeight;
			height: config.$baseLineHeight;
			transition: 90ms transform ease-in-out;
			background-color: currentColor;
		}
		&:checked:before { // tick-on
			transform: scale(1);
		}
		&:focus {
			border-color: config.$colorMain;
			//box-shadow: 0 0 0 1px $colorMain;
		}
		&[style]:checked:before {
			color:inherit;
			text-shadow: 0 0 1px black;
		}
	}



	&.button{
		.control {
			flex-wrap: nowrap;

			span.box-label {
				//put here and not below for extra strong rules
				padding: util.dp(11) util.dp(18);
				margin:0;
			}

			input:checked + span.box-label.outlined, input:checked + span.box-label {
				background-color: config.$colorFocus;
				color: inherit;
			}
			
		}

		

		span.box-label {
			@extend .goui-button;


		}

		
		input {
			margin: 0;
		}

	}

	.wrap {
		background-color: transparent;
		border: none;
		border-radius: 0;
	}

	.label {
		display: none;
	}

	.control {
		display: flex;
		//padding:  0;
		align-items: center;
		flex-wrap: wrap;

		.box-label {
			flex: 1;
			display: block;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
			padding: util.dp(14) util.dp(12);
			margin: auto 0;
			user-select: none;
			-webkit-user-select: none;
			-moz-user-select: none;
		}

	}
}


%input {
	//background-color:transparent; // Transparent Makes date field in safari unusable
	background-color: config.$colorBackgroundInput;
	font: config.$fontBase;
	//min-width: dp(100); //for select element
	margin: 0;
	border: 0;
	padding: util.dp(11) util.dp(16);
	width: 100%;
	color: config.$colorText;
	display: block;// for text area which has inline-block by default and gets some extra margin

	&::placeholder {
		transition: all 200ms linear;
		color: config.$colorTextPlaceholder;
	}
}

.goui-pit {
	@extend %control-pit;

	// draws line between items inside a pit in event dialog for example
	> div + div {
		border-top: config.$borderWidth solid config.$colorOutline;
	}
	&:not(:empty){
		padding-bottom: util.dp(12);
		margin-bottom: util.dp(-12);
	}
}



.goui-form-field, .goui-display-field {
	display: flex;
	flex-direction: column;
//	width: 100%;
	margin: 0;
	position: relative;
}

.goui-display-field {

	&.pit {

		.wrap {
			@extend %control-pit;

			div.control {
				min-height: util.dp(46);
				overflow: auto;
				white-space: normal;
				word-wrap: break-word;
			}


			div.label {
				display: flex;
				align-items: center;
				top:0;
				overflow: visible;
				pointer-events: none;
				height: config.$borderWidth;
				background-color: config.$colorBackgroundInput;
			}
		}
	}

	&.right {
		.control {
			text-align: right;
		}
	}

	&.with-icon {
		.wrap {
			div.label {
				left: util.dp(48);
				padding: 0 util.dp(4);
			}
			.control {
				padding-left: util.dp(10);
			}
		}
	}

	&.error {
		.wrap{
			.control {
				color: config.$colorError;
			}
		}
	}

	&.success {
		.wrap {
			.control {
				color: config.$colorSuccess;
			}
		}
	}

	&.warning {
		.wrap {
			.control {
				color: config.$colorWarning;
			}
		}
	}
	&.notice {
		.wrap {
			.control {
				color: config.$colorNotice;
			}
		}
	}

	.wrap {
		flex: 1;
		align-items: center;
		overflow:hidden;
		display: flex;
		flex-flow: row nowrap;
		border: config.$borderWidth solid transparent;

		> i {
			width: util.dp(24);
			height: util.dp(24);
			margin: util.dp(11) util.dp(0) util.dp(11) util.dp(16);
		}

		div.label {
			padding: 0 util.dp(4);
			font-size: util.sp(13);
			line-height: util.sp(13);
			display:block;
			//display: flex;
			//align-items: center;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
			color: config.$colorTextSecondary;
			vertical-align: top;
			position:absolute;
			left: util.dp(16);
			top: util.dp(-6.5);
		}

		.control {
			font: config.$fontBase;
			min-width: util.dp(22); //for select element
			margin: 0;
			border: 0;
			padding: util.dp(11) util.dp(16);

			//width: 100%;
			//outline: none;
			color: config.$colorText;
			//display: flex;// for text area which has inline-block by default and gets some extra margin. But it breaks overflow ellipsis

			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;

			i.icon {
				align-self: center;
			}
		}
	}


}

.goui-form-field {

	&.readonly {
		.wrap {
			background-color: config.$colorBackgroundReadOnly;
			div.label {
				background-color: config.$colorBackgroundReadOnly;
			}
			input, textarea {
				background-color: config.$colorBackgroundReadOnly;
			}
		}
	}
	.wrap {
		flex: 1;
		@extend %control-pit;
		display: flex;
		flex-flow: row nowrap;
		>.control {
			flex: 1;
			appearance: none;
			-webkit-appearance: none; /*Removes default chrome and safari style*/
			-moz-appearance: none; /* Removes Default Firefox style*/
		}

		> i {
			width: util.dp(24);
			height: util.dp(24);
			margin: util.dp(11) util.dp(0) util.dp(11) util.dp(16);
		}

		menu.goui-toolbar {

			padding: 0 !important;
			border-radius: 0 $formFieldBorderRadius $formFieldBorderRadius 0;

			border-left: config.$borderWidth solid config.$colorOutline;// !important; //importants for Window rule for border top
			border-top: 0 !important;
			border-right: 0 !important;
			border-bottom: 0 !important;

			min-height: auto;

			gap: util.dp(4);

			> * {
				//margin: 0 dp(4) 0 0;
				padding: util.dp(6);
			}

			.goui-button {
				color: config.$colorTextSecondary;
				border-radius: 0;
				i.icon {
					font-size: util.dp(20);
				}

				&.with-icon:not(.with-text) {
					padding: util.dp(6);
					height: 100%;
				}
				//&:hover {
				//	background-color: transparent;
				//}
			}
		}
	}

	&.with-icon {
		div.label {
			left: util.dp(48);
		}
		input {
			padding-left: util.dp(10);
		}
	}

	&:focus-within {
		>.wrap {
			border-color: config.$colorMain;

			> i {
				color: config.$colorMain;
			}

			>.label {
				color: config.$colorMain;
			}
		}
	}


	&.frame-hint {
		.wrap {
			border-bottom: 0;
			border-bottom-left-radius: 0;
			border-bottom-right-radius: 0;
		}

		//margin-bottom: dp(30); //matches hint size

		&:focus-within:not(.invalid) {
			.hint {
				border-color: config.$colorMain;
			}
		}

		.hint {
			transition: border-color 100ms linear;
			background-color: config.$colorBackgroundInput;
			border: config.$borderWidth solid config.$colorOutline;
			border-radius: 0 0 $formFieldBorderRadius $formFieldBorderRadius;
			padding: util.dp(3) util.dp(18);
		}

		&.invalid {
			.hint {
				background-color: config.$colorErrorBg;
				border-color: config.$colorError;
			}
		}
	}




	div.label {
		display: flex;
		align-items: center;
		overflow: visible;
		text-overflow: ellipsis;
		white-space: nowrap;
		color: config.$colorTextSecondary;
		vertical-align: top;
		pointer-events: none;
		position:absolute;
		left: util.dp(16);
		padding: 0 util.dp(4);
		top: math.div(config.$baseLineHeight, 2) + util.dp(11);
		height: config.$borderWidth;
		background-color: config.$colorBackgroundInput;
		transition: top .15s cubic-bezier(.4,0,.2,1), left .15s cubic-bezier(.4,0,.2,1), font-size .15s cubic-bezier(.4,0,.2,1);

		//below performs better but looks ugly on windows :(
		will-change: top, left, font-size;

		&:empty {
			display: none;
		}
	}



	&.no-floating-label, &.has-value, &:focus-within {
		div.label {
			top: 0;
			left: util.dp(16);
			font-size: util.sp(13);
		}
	}

	&.number {
		input {
			text-align: right;
		}
	}

	&.text, &.number, &.date, &.time, &.textarea, &.select, &.duration, &.recurrence {
		input, textarea, .wrap > select {
			@extend %input;

			&:focus {
				color: config.$colorMain;
			}
		}


		input:-webkit-autofill {
			background-color: transparent !important;
			animation-name: onautofillstart;
		}
		input:not(:-webkit-autofill) {
			animation-name: onautofillcancel;
		}

		input, .wrap > select {
			height: util.dp(46); //padding 11 * 2 + line height 24. Needed to be set for Safari with input.time and date.
		}
	}
	textarea {
		line-height: config.$baseLineHeight;
		//show textarea as 2 lines by default so it's clear it's a text area
		min-height: (config.$baseLineHeight * 2) + util.dp(22); // add padding
	}

	&.time {
		input::-webkit-calendar-picker-indicator {
			display: none
		}
	}

	&.duration {
		.control {
			line-height: util.dp(46);
			display: flex;
			flex-direction: row;
			align-items: center;
		}

		input.hour {
			width: auto;
			flex: 1;
			text-align: right;
		}

		input.text {
			height: config.$baseLineHeight;
			cursor: default;
			min-width: auto;
			width: util.sp(22);
			box-sizing: content-box;
			padding-right: util.dp(2);
			padding-left: util.dp(2);
		}
		input.text:first-child {
			padding-left: util.dp(16);
		}

		input.text:last-child {
			padding-right: util.dp(16);
		}

		input.month:placeholder-shown {
			width: util.sp(30);
		}

		input.text.year {
			width: util.dp(44);
		}
	}




	&.invalid {
		.wrap {
			border-color: config.$colorErrorBorder;
			background-color: config.$colorErrorBg;
			i {
				color: config.$colorError;
			}

			input {
				color: config.$colorError;
				background-color: config.$colorErrorBg;
			}

			> .label {
				background-color: config.$colorErrorBg;
				color: config.$colorError;
			}

			menu.goui-toolbar {
				border-color: config.$colorErrorBorder;
			};
		}

		.hint {
			color: config.$colorError;
		}
	}

	.error {
		font-size: util.dp(14);
		color: config.$colorError;
		line-height: util.dp(20); //match icon
		padding: 2px util.dp(12);
		height: util.dp(20);
		width: 100%;
	}

	.hint {
		font-size: util.dp(14);
		color: config.$colorTextSecondary;
		line-height: util.dp(20); //match icon
		padding: util.dp(4) util.dp(18) util.dp(4);

		&:empty {
			padding: 0;
		}
	}

	input.number {
		padding-right: 0;
		min-width: util.dp(54);
	}

	input.text {
		text-overflow: ellipsis;
		overflow: hidden;
		white-space: nowrap;
	}

	/**  end text and textarea **/

	&.radiogroup {
		@extend .checkbox-group;

		//width: auto;
		.radio.control {
			padding: 0;
			flex: none;
		}

		&.box {
			.radio > label {
				padding-right: util.dp(8);
			}

			input {
				&[type="radio"] {
					border-radius: util.dp(12);
					&:checked:before {
						content: '';
						border-radius: 50%;
						transform: scale(.4);
					}
				}
			}
		}

		&.button { // check buttons should be in segment .group

			.control {
				&>:not(:first-child) {
					.box-label {
						border-top-left-radius: 0;
						border-bottom-left-radius: 0;
						border-left: 0;
					}
				}
				&>:not(:last-child) {
					.box-label {
						border-top-right-radius: 0;
						border-bottom-right-radius: 0;
					}
				}

				.box-label {
					display:flex;
					align-items: center;
					i.icon {
						vertical-align: middle;
						margin-right: util.dp(8);
						width: util.dp(24);
						height: util.dp(24);
						line-height: util.dp(24);
					}
				}
			}


			.radio {

				background-color: config.$colorBackgroundInput;
				border: config.$borderWidth solid config.$colorBorder;
				border-radius: util.dp(12);
				overflow: hidden; //otherwise selected color overflows
				font-weight: 600;

				&:focus-visible {
					border-color: config.$colorMain;
				}

				> label {
					padding: 0;
					overflow: hidden;

					+ label {
						border-left: 1px solid config.$colorOutline;
					}
				}
			}
		}


		&.list {
			.radio.control {
				flex-direction: column;
				width: 100%;
				.control {
					width: 100%;
					align-items: start;

					padding: 0;
					span.box-label {
						padding: util.dp(8) util.dp(16);

						i.icon {
							vertical-align: middle;
							margin-right: util.dp(8);
							width: util.dp(24);
							height: util.dp(24);
							line-height: util.dp(24);
						}
					}

					input {
						display: none;
					}

					input:checked + span.box-label {
						background-color: config.$colorSelectedRowInactive;
					}
				}
			}
		}



		&.list {
			.radio.control {
				flex-direction: column;
				.control {
					width: 100%;
					align-items: start;

					padding: 0;
					span.box-label {
						padding: util.dp(8) util.dp(16);

						i.icon {
							vertical-align: middle;
							margin-right: util.dp(8);
						}
					}

					input {
						display: none;
					}

					input:checked + span.box-label {
						background-color: config.$colorSelectedRowInactive;
					}
				}
			}
		}


	}

	/** start checkbox **/
	&.check {

		&.invalid {
			.wrap {
				background-color: transparent;
			}

			input, &.switch input, &.button input + span.outlined   {
				background-color: config.$colorErrorBg;
				border-color: config.$colorError;
				color: config.$colorError;
			}

			&.switch input {
				&::after {
					background-color: config.$colorError;
				}
			}

			.box-label {
				color: config.$colorError;
			}

		}

		@extend %boxgroup;

		&.box input {
			&[type="checkbox"] {
				&:before {
					clip-path: polygon(39.375% 74.375%, 16% 51%, 20.48% 46.52%, 39.33% 65.37%, 79.33% 25.37%, 83.81% 29.85%)
				}
			}
		}

		.button {
			input + span {
				@extend .goui-button;
			}
		}

		&.switch input { // track
			background-color: config.$colorBackgroundInput;
			width: util.dp(50);
			height: util.dp(28);
			overflow:hidden;
			border: config.$borderWidth solid config.$colorText;
			position:relative;
			border-radius:999px;
			&::before {
				content: '' !important;
			}
			&::after { // thumb
				position:absolute;
				top: 0 - config.$borderWidth;
				left: 0 - config.$borderWidth;
				color:white;
				font-size: .7em;
				content: "";
				transition: 100ms transform ease-out;
				margin: util.dp(7);
				display:block;
				height: util.dp(14);
				width: util.dp(14);
				background-color:  config.$colorTextSecondary;//rgba(0, 0, 0, 0.48);
				border-radius:999px;
			}
			&:checked {
				background-color: var(--bg-focus);
			}
			&:checked::after  {
				transform: scale(1.5) translateX(util.dp(14));
				background-color: config.$colorMain;
			}
			//&:active::after { // focus
			//	transform: scale(1.75);
			//}
			&:active:checked::after  {
				//transform:scale(1.75) translateX(dp(12));
				//background-color: $colorBackgroundInput;
			}
			&:focus {
				border-color: config.$colorMain;
				//&:checked:after {
				//	transform:scale(1.75) translateX(dp(12));
				//}
			}
		}

	}
	/** end checkbox **/


	&.select {
		position: relative;
		.wrap {
			select {
				padding-right: util.dp(30);
				background-image: none;
				appearance: none;
				overflow: hidden;
				text-overflow: ellipsis;
				white-space: nowrap;
			}
		}
		&:after {
			position: absolute;
			display: inline-block;
			top: config.$baseLineHeight - util.dp(6);
			right: util.dp(8);
			@extend %icon;
			color: config.$colorTextSecondary;
			font-size: 2rem;
			margin-right: 0;
			content: "expand_more";
			pointer-events: none;
		}
	} // end select

}


.goui-fieldset {
	border: 0;
	min-width: 0;
	padding: util.dp(16);
	margin: 0;

	.legend {
		display: block;
		line-height:normal;
		font-size: util.dp(18);
		font-weight: 500;
		padding: util.dp(8) util.dp(16) util.dp(8) 0;
	}

	> p:first-child {
		margin-top: 0;
	}

	//& + .goui-fieldset {
	//	border-top: $borderWidth solid $colorBorder;
	//}
}


.goui-html-field {
	position: relative;

	&.invalid {
		div.editor{
			background-color: config.$colorErrorBg;
			border-color: config.$colorError;
		}
	}

	div.editor {
		@extend %input;
		@extend .normalize;
		min-height: util.dp(100);

		img {
			max-width: 100%;
		}

		overflow: auto;

		//placeholder support
		&:empty:before {
			content: attr(data-placeholder);
			color: transparent;
			pointer-events: none;
			transition: all 200ms linear;
		}

	}

	&:focus-within {
		menu.goui-toolbar {
			display: flex;
		}
	}
}

.goui.goui-toolbar.html-field-toolbar {
	position: absolute;
	z-index: config.$zIndexMenu;
	flex-wrap: wrap;
	max-width: 100%;
	@extend .z8;
}

form {
	// for loading mask
	position: relative;

	.row {
		display: flex;
		flex-wrap: wrap;
		column-gap: util.dp(12);
		row-gap: 0;
		align-items: start;
		// messes up items that need their own width
		//>* {
		//	flex: 1;
		//}
	}

	// to make button align with form field
	.goui-button {
		margin:0;
	}
}



.autocomplete {

	&.expanded {
		.wrap {
			border-color: config.$colorMain;
			border-bottom-left-radius: 0;
			border-bottom-right-radius: 0;
			border-bottom: 0;
		}

		.label, .control {
			color: config.$colorMain;
		}
	}
}

.autocomplete-suggestions {

	@extend .z8;
	border: config.$borderWidth solid config.$colorMain;
	border-top: 0;
	border-radius: 0 0 $formFieldBorderRadius $formFieldBorderRadius;
	background-color: white;

}


.masked {
	.form-field {
		color: config.$colorMasked !important;
		.control {
			border-color: config.$colorMasked !important;
			color: config.$colorMasked !important;
			background-color: config.$colorMasked !important;
			> * {
				visibility: hidden;
			}
		}

		.label {
			display: none;
		}
	}
}

div.color-dot {
	border-radius: $formFieldBorderRadius;
	margin: util.dp(11); //match input
	height: config.$baseLineHeight;
	flex: 1;
}


.chips {

	.editor {
		@extend %input;
		width: auto;
		flex: 1;
		min-width: 0;
		cursor: text;
		white-space: nowrap;
		overflow: hidden;
		max-width: 100%;
		float:left;
		display:inline-block;
	}
	.wrap {
		cursor: text;
		display: flex;

		.control-wrap {
			display:block;
			flex: 1;
			overflow: hidden;

		}


		.chip {
			display: flex;
			flex-direction: row;
			float: left;
			border-radius: util.dp(20);
			background-color: var(--bg-highest);
			padding: util.dp(3) util.dp(12);
			margin: util.dp(8) util.dp(4);
			max-width: util.dp(120);
			min-width: util.dp(60);
			cursor: default;

			> span {
				flex: 1;
				overflow: hidden;
				text-overflow: ellipsis;
				white-space: nowrap;
			}

			&.selected {
				background-color: config.$colorSelectedRow;
				color: white;
				.goui-button {
					color: white;
				}
			}

			.goui-button {
				color: config.$colorTextSecondary;
				padding: 0;
				margin: 0;
				margin-left: util.dp(8);
				margin-right: util.dp(-8);
			}
		}
	}
}

.goui-form-field {
	&.date-range {
		.value-display {
			flex: 1;
			align-self: stretch;
			padding: util.dp(11) util.dp(16);
			height: util.dp(46);
		}
	}
}


.goui-form-field.range {

	.wrap {
		border: none;
		overflow:visible;
	}

	input[type='range'] {
		overflow: visible;;
		padding: 0;
		-webkit-appearance: none;
		background: config.$colorMain;
		height: util.dp(8);
		margin: util.dp(19);
	}

	input[type='range']::-webkit-slider-thumb {
		-webkit-appearance: none;
		background: config.$colorMain;
		height: util.dp(24);
		width: util.dp(24);
		border-radius: 50%;
		cursor: ew-resize;
		box-shadow: 0 0 2px 0 #555;
		transition: background .3s ease-in-out;
	}
}


.listfield {
	.control {
		padding: util.dp(11) util.dp(16);
		min-height: util.dp(46);
	}
}

.listfield-list{
	margin:0;
	padding: 0;
	list-style: none;

	li {
		margin: 0;
		padding: util.dp(8) util.dp(4);
		cursor: default;
		user-select: none;
		-webkit-user-select: none;
		-moz-user-select: none;

		&:hover {
			background-color: config.$colorHover;
		}
	}
}


.label-align-left {
	.goui-display-field {
		//&:not(:last-child) {
		//	border-bottom: $borderWidth solid $colorLine;
		//}
	}
	.goui-form-field, .goui-display-field {
		min-width: util.dp(200);
		.wrap {
			//margin-left: util.dp(100);
			align-items: center;

			.label {
				top: auto;
				left: auto;
				flex: 1;
				position: relative;
				max-width: util.dp(100);
				overflow: hidden;
				//mask-image: linear-gradient(to right, white 80%, transparent);
			}

			.control {
				flex: 1;
				padding: util.dp(3) 0;
			}

		}

	}
}