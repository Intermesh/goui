@use "config";
@use "util";
@use "icons";
@use "layout";

.goui-table {

  position: relative;
	border-collapse: collapse;
	border-spacing: 0;
	table-layout: fixed;
	width: util.dp(100);

  &:focus-within {

    tbody {
      tr.data.selected {
        background-color: config.$colorSelectedRow;
        outline: none;
        color: config.$colorSelectedRowText;

        a, i.icon {
          color: inherit;
        }
      }

			tr.data:focus-visible {
				background-color: config.$colorFocus;
			}
    }

  }

  //background-color: $colorBackgroundDarker;


  &.rowselect {
    cursor: default;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
  }

  &.no-row-lines {

    tbody {
      tr {
        border-bottom: 1px solid transparent;
      }
    }

  }


  //applies to th, td and col
  .checkbox-select-column {
    width: util.dp(64);
  }



  tbody {
    tr {
      position: relative;
      border-bottom: 1px solid config.$colorDivider;

      &.group {
        color: config.$colorAccent;
      }

      &.data {
        &:hover {
          background-color: config.$colorHover;
        }

        &.selected {
          background-color: config.$colorSelectedRowInactive;
        }
      }

      &.drag-over {
        &.on {
          background-color: config.$colorHover;
        }
			}
    }
  }

  thead {

    position: sticky;
    top: 0;
    z-index: 2;

    tr {

      th {

        background-color: config.$surfaceLow;
				font: config.$fontBase;
				font-size: config.$fontSize * .8;
        padding: util.dp(8) util.dp(8);

        &.sorted {


          padding-right: util.dp(40);

          &:after {
            //asc
            content: "south";
            @extend %icon;
            font-size: util.dp(16);
            position: absolute;
            right: util.dp(8);
            top: util.dp(12); // the th height = line-height 20 + padding 8 = 36
            color: inherit;
          }

          &.desc {
            &:after {
              content: "north";
            }
          }
        }

        hr {
          @extend %vr;
          position: absolute;
          top: 0;
          right: 0;
          bottom: 0;
          height: 100%;
        }

        &:before {
          //normal border on th didn't stick :( so I used this workaround.
          content: "";
          position: absolute;
          left: 0;
          bottom: 0;
          width: 100%;
          border-bottom: config.$borderWidth solid config.$colorBorder;
        }

				&.sticky-col {
					position: sticky;
					z-index: 2;
				}

      }
    }
  }


  td, th {
    min-width: util.dp(30);
    text-align: left;
    vertical-align: middle;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    padding: util.dp(8);
    position: relative;

    &:first-child {
      padding-left: util.dp(16);
      //border-radius: dp(10) 0 0 dp(10) ;
    }

    &:last-child {
      padding-right: util.dp(16);
      //border-radius: 0 dp(10) dp(10) 0;
    }

    &.r, &.right {
      text-align: right;
      float: none
    }

    .goui-form-field {
      margin: 0;
    }

    //checkboxes in table should be compact
    .check.box {
      margin: 0;

      .control {
        padding: 0;

        .box-label {
          display: none;
        }
      }

      .hint, .label {
        display: none;
      }
    }

    .goui-button {
      padding: util.dp(3) util.dp(18);
			min-height: auto;

      &.with-icon:not(.with-text) {
        //icon only
        padding: util.dp(3);
				margin: util.dp(-8); //undo td padding
      }
    }
  }

	// somehow detached objects appeared in the Table if this class was added after adding the element to the DOM.
	// This css makes no sense but I left it here because it caused this memory problem.
  //+ .goui-toolbar {
  //  margin-top: util.dp(16);
  //}

	td.sticky-col {
		background-color: config.$surfaceMid;

		position: sticky;
		z-index: 1;
	}

	tr.data:hover {
		td.sticky-col {
			background-color: color-mix(in srgb, config.$surfaceMid, #000 4%);
		}
	}
	tr.data.selected {
		td.sticky-col {
			background-color: color-mix(in srgb, config.$surfaceMid, #000 8%);
		}
	}
}

.bg-lowest, .card, .main {

	.goui-table {
		td.sticky-col {
			background-color: config.$surfaceLowest;
		}
		tr.data:hover {
			td.sticky-col {
				background-color: color-mix(in srgb, config.$surfaceLowest, #000 4%);
			}
		}
		tr.data.selected {
			td.sticky-col {
				background-color: color-mix(in srgb, config.$surfaceLowest, #000 8%);
			}
		}
	}
}

.bg-low {

	.goui-table {
		td.sticky-col {
			background-color: config.$surfaceLow;
		}
		tr.data:hover {
			td.sticky-col {
				background-color: color-mix(in srgb, config.$surfaceLow, #000 4%);
			}
		}
		tr.data.selected {
			td.sticky-col {
				background-color: color-mix(in srgb, config.$surfaceLow, #000 8%);
			}
		}
	}
}

.bg-mid {

	.goui-table {
		td.sticky-col {
			background-color: config.$surfaceMid;
		}
		tr.data:hover {
			td.sticky-col {
				background-color: color-mix(in srgb, config.$surfaceMid, #000 4%);
			}
		}
		tr.data.selected {
			td.sticky-col {
				background-color: color-mix(in srgb, config.$surfaceMid, #000 8%);
			}
		}
	}
}


.bg-high {

	.goui-table {
		td.sticky-col {
			background-color: config.$surfaceHigh;
		}
		tr.data:hover {
			td.sticky-col {
				background-color: color-mix(in srgb, config.$surfaceHigh, #000 4%);
			}
		}
		tr.data.selected {
			td.sticky-col {
				background-color: color-mix(in srgb, config.$surfaceHigh, #000 8%);
			}
		}
	}
}

.bg-highest {

	.goui-table {
		td.sticky-col {
			background-color: config.$surfaceHighest;
		}
		tr.data:hover {
			td.sticky-col {
				background-color: color-mix(in srgb, config.$surfaceHighest, #000 4%);
			}
		}
		tr.data.selected {
			td.sticky-col {
				background-color: color-mix(in srgb, config.$surfaceHighest, #000 8%);
			}
		}
	}
}


